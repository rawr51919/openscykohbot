const { PermissionsBitField } = require("discord.js");

// All font tables
const FONT_TABLES = {
  fullwidth: {
    a: "ÔΩÅ", b: "ÔΩÇ", c: "ÔΩÉ", d: "ÔΩÑ", e: "ÔΩÖ", f: "ÔΩÜ", g: "ÔΩá", h: "ÔΩà",
    i: "ÔΩâ", j: "ÔΩä", k: "ÔΩã", l: "ÔΩå", m: "ÔΩç", n: "ÔΩé", o: "ÔΩè", p: "ÔΩê",
    q: "ÔΩë", r: "ÔΩí", s: "ÔΩì", t: "ÔΩî", u: "ÔΩï", v: "ÔΩñ", w: "ÔΩó", x: "ÔΩò",
    y: "ÔΩô", z: "ÔΩö", A: "Ôº°", B: "Ôº¢", C: "Ôº£", D: "Ôº§", E: "Ôº•", F: "Ôº¶",
    G: "Ôºß", H: "Ôº®", I: "Ôº©", J: "Ôº™", K: "Ôº´", L: "Ôº¨", M: "Ôº≠", N: "ÔºÆ",
    O: "ÔºØ", P: "Ôº∞", Q: "Ôº±", R: "Ôº≤", S: "Ôº≥", T: "Ôº¥", U: "Ôºµ", V: "Ôº∂",
    W: "Ôº∑", X: "Ôº∏", Y: "Ôºπ", Z: "Ôº∫", 0: "Ôºê", 1: "Ôºë", 2: "Ôºí", 3: "Ôºì",
    4: "Ôºî", 5: "Ôºï", 6: "Ôºñ", 7: "Ôºó", 8: "Ôºò", 9: "Ôºô", "!": "ÔºÅ", "@": "Ôº†",
    "#": "ÔºÉ", "$": "ÔºÑ", "%": "ÔºÖ", "^": "Ôºæ", "&": "ÔºÜ", "*": "Ôºä", "(": "Ôºà",
    ")": "Ôºâ", "'": "‚Äô", "\"": "‚Äù", "-": "Ôºç", "_": "Ôºø", "+": "Ôºã", "=": "Ôºù",
    ";": "Ôºõ", ":": "Ôºö", "[": "Ôºª", "]": "ÔºΩ", "{": "ÔΩõ", "}": "ÔΩù", "|": "ÔΩú",
    "<": "Ôºú", ">": "Ôºû", "?": "Ôºü", "/": "Ôºè", "\\": "Ôºº", ".": "Ôºé", ",": "Ôºå",
    "`": "‚Äò", "~": "ÔΩû", " ": "„ÄÄ"
  },
  chinese: {
    a: "ÂçÇ", b: "‰πÉ", c: "Âåö", d: "ÂàÄ", e: "‰πá", f: "‰∏ã", g: "Âé∂", h: "ÂçÑ",
    i: "Â∑•", j: "‰∏Å", k: "Èïø", l: "‰πö", m: "‰ªé", n: "†ò®", o: "Âè£", p: "Â∞∏",
    q: "„îø", r: "Â∞∫", s: "‰∏Ç", t: "‰∏Ö", u: "Âáµ", v: "„É™", w: "Â±±", x: "‰πÇ",
    y: "‰∏´", z: "‰πô", A: "ÂçÇ", B: "‰πÉ", C: "Âåö", D: "ÂàÄ", E: "‰πá", F: "‰∏ã",
    G: "Âé∂", H: "ÂçÑ", I: "Â∑•", J: "‰∏Å", K: "Èïø", L: "‰πö", M: "‰ªé", N: "†ò®",
    O: "Âè£", P: "Â∞∏", Q: "„îø", R: "Â∞∫", S: "‰∏Ç", T: "‰∏Ö", U: "Âáµ", V: "„É™",
    W: "Â±±", X: "‰πÇ", Y: "‰∏´", Z: "‰πô", 0: "„Äá", 1: "„Ä°", 2: "Â∑±", 3: "„Çç",
    4: "ÎÇò", 5: "„Çâ", 6: "‰∏á", 7: "„Éï", 8: "Êó•", 9: "„îø", "!": "ÔºÅ", "(": "„Äå",
    ")": "„Äç", ";": "Ôºõ", ":": "Ôºö", "<": "„Åè", ">": "Ôºû", "?": "Ôºü", ".": "„ÄÇ",
    ",": "„ÄÅ", " ": "„ÄÄ", "-": "‰∏Ä", "+": "ÂçÅ", "*": "ÂÖ≠", "=": "‰∫å"
  },
  script: {
    a: "ùí∂", b: "ùí∑", c: "ùí∏", d: "ùíπ", e: "ùëí", f: "ùíª", g: "ùëî", h: "ùíΩ",
    i: "ùíæ", j: "ùíø", k: "ùìÄ", l: "ùìÅ", m: "ùìÇ", n: "ùìÉ", o: "ùëú", p: "ùìÖ",
    q: "ùìÜ", r: "ùìá", s: "ùìà", t: "ùìâ", u: "ùìä", v: "ùìã", w: "ùìå", x: "ùìç",
    y: "ùìé", z: "ùìè", A: "ùíú", B: "ùêµ", C: "ùíû", D: "ùíü", E: "ùê∏", F: "ùêπ",
    G: "ùí¢", H: "ùêª", I: "ùêº", J: "ùí•", K: "ùí¶", L: "ùêø", M: "ùëÄ", N: "ùí©",
    O: "ùí™", P: "ùí´", Q: "ùí¨", R: "ùëÖ", S: "ùíÆ", T: "ùíØ", U: "ùí∞", V: "ùí±",
    W: "ùí≤", X: "ùí≥", Y: "ùí¥", Z: "ùíµ", 0: "0", 1: "1", 2: "2", 3: "3",
    4: "4", 5: "5", 6: "6", 7: "7", 8: "8", 9: "9", "\"": "‚Äù", ",": ",",
    ".": ".", "!": "!", "?": "?", " ": " "
  },
  blocks1: {
    a: "üá¶ ", b: "üáß ", c: "üá® ", d: "üá© ", e: "üá™ ", f: "üá´ ", g: "üá¨ ", h: "üá≠ ",
    i: "‚Ñπ ", j: "üáØ ", k: "üá∞ ", l: "üá± ", m: "üá≤ ", n: "üá≥ ", o: "üá¥ ", p: "üáµ ",
    q: "üá∂ ", r: "üá∑ ", s: "üá∏ ", t: "üáπ ", u: "üá∫ ", v: "üáª ", w: "üáº ", x: "üáΩ ",
    y: "üáæ ", z: "üáø ", A: "üá¶ ", B: "üáß ", C: "üá® ", D: "üá© ", E: "üá™ ", F: "üá´ ",
    G: "üá¨ ", H: "üá≠ ", I: "üáÆ ", J: "üáØ ", K: "üá∞ ", L: "üá± ", M: "üá≤ ", N: "üá≥ ",
    O: "üá¥ ", P: "üáµ ", Q: "üá∂ ", R: "üá∑ ", S: "üá∏ ", T: "üáπ ", U: "üá∫ ", V: "üáª ",
    W: "üáº ", X: "üáΩ ", Y: "üáæ ", Z: "üáø ", 0: ":zero: ", 1: ":one: ", 2: ":two: ",
    3: ":three: ", 4: ":four: ", 5: ":five: ", 6: ":six: ", 7: ":seven: ",
    8: ":eight: ", 9: ":nine: ", "*": ":asterisk: ", "#": ":hash: ", "!": ":exclamation: ",
    "?": ":question: ", " ": "„ÄÄ"
  },
  blocks2: {
    a: "üá¶ ", b: "üáß ", c: "üá® ", d: "üá© ", e: "üá™ ", f: "üá´ ", g: "üá¨ ", h: "üá≠ ",
    i: "‚Ñπ ", j: "üáØ ", k: "üá∞ ", l: "üá± ", m: "üá≤ ", n: "üá≥ ", o: "üá¥ ", p: "üáµ ",
    q: "üá∂ ", r: "üá∑ ", s: "üá∏ ", t: "üáπ ", u: "üá∫ ", v: "üáª ", w: "üáº ", x: "üáΩ ",
    y: "üáæ ", z: "üáø ", A: "üá¶ ", B: "üáß ", C: "üá® ", D: "üá© ", E: "üá™ ", F: "üá´ ",
    G: "üá¨ ", H: "üá≠ ", I: "üáÆ ", J: "üáØ ", K: "üá∞ ", L: "üá± ", M: "üá≤ ", N: "üá≥ ",
    O: "üá¥ ", P: "üáµ ", Q: "üá∂ ", R: "üá∑ ", S: "üá∏ ", T: "üáπ ", U: "üá∫ ", V: "üáª ",
    W: "üáº ", X: "üáΩ ", Y: "üáæ ", Z: "üáø ", 0: ":zero: ", 1: ":one: ", 2: ":two: ",
    3: ":three: ", 4: ":four: ", 5: ":five: ", 6: ":six: ", 7: ":seven: ",
    8: ":eight: ", 9: ":nine: ", "*": ":asterisk: ", "#": ":hash: ", "!": ":grey_exclamation: ",
    "?": ":grey_question: ", " ": "„ÄÄ"
  },
  mirror: {
    a: "…ê", b: "q", c: "…î", d: "p", e: "«ù", f: "…ü", g: "∆É", h: "…•", i: "ƒ±",
    j: "…æ", k: " û", l: "l", m: "…Ø", n: "u", o: "o", p: "d", q: "b", r: "…π",
    s: "s", t: " á", u: "n", v: " å", w: " ç", x: "x", y: " é", z: "z",
    A: "ÍìØ", B: "Íì≠", C: "Íìõ", D: "Íì∑", E: "∆é", F: "Íìû", G: "Íì®", H: "H",
    I: "I", J: "≈ø", K: "Íìò", L: "Íì∂", M: "W", N: "N", O: "O", P: "Íìí",
    Q: "·ø∏", R: "Íì§", S: "S", T: "Íìï", U: "Íìµ", V: "Íì•", W: "M", X: "X",
    Y: "‚ÖÑ", Z: "Z", 0: "0", 1: "∆ñ", 2: "’á", 3: "∆ê", 4: "h", 5: "‡´¨",
    6: "9", 7: "L", 8: "8", 9: "6", "*": "‚Çì", "#": "#", "!": "¬°", "?": "¬ø",
    " ": " "
  }
};

// Helper to map text
function convertText(text, table) {
  return Array.from(text).map(c => table[c] || c).join("");
}

// Store cooldowns and per-server config
const cooldowns = new Map(); // Map<guildId, Map<userId, timestamp>>
const serverConfig = new Map(); // Map<guildId, { cooldownMs }>

// Default cooldown
const DEFAULT_COOLDOWN_MS = 5000;

module.exports = {
  name: "font",
  description: "Make OpenScykohBot output what you say in any font you specify.",

  async execute(message) {
    if (message.author.bot) return;

    const guildId = message.guild?.id || "dm";
    if (!cooldowns.has(guildId)) cooldowns.set(guildId, new Map());
    const guildCooldowns = cooldowns.get(guildId);

    // Get server cooldown, fallback to default
    const serverSettings = serverConfig.get(guildId) || { cooldownMs: DEFAULT_COOLDOWN_MS };
    const cooldownMs = serverSettings.cooldownMs;

    const isAdmin = message.member?.permissions.has(PermissionsBitField.Flags.Administrator);
    const now = Date.now();
    const userCooldown = guildCooldowns.get(message.author.id) || 0;

    if (!isAdmin && now < userCooldown) {
      return message.channel.send(
        `Please wait ${Math.ceil((userCooldown - now) / 1000)}s before using this command again.`
      );
    }

    const args = message.content.trim().split(/\s+/).slice(1);

    // Admin command to change cooldown
    if (args[0] === "setcooldown") {
      if (!isAdmin) return message.channel.send("Only admins can set the cooldown.");
      const newCooldown = parseInt(args[1], 10);
      if (!newCooldown || newCooldown < 0) return message.channel.send("Please specify a valid cooldown in ms.");
      serverConfig.set(guildId, { cooldownMs: newCooldown });
      return message.channel.send(`Server cooldown set to ${newCooldown} ms.`);
    }

    const font = args[0];
    const text = args.slice(1).join(" ");

    if (!font || !text) {
      return message.channel.send(
        `:capital_abcd: **Help for \`&font\`**
		Usage: \`&font <fullwidth; chinese; script; blocks1; blocks2; mirror> <text>\`
		Examples:
		\`&font fullwidth hi\` ‚Üí ÔΩàÔΩâ
		\`&font script hi\` ‚Üí ùíΩùíæ
		Admins can change server cooldown: \`&font setcooldown <ms>\``
      );
    }

    if (!(font in FONT_TABLES)) {
      return message.channel.send(`Unknown font "${font}". Use help to see available fonts.`);
    }

    // Set cooldown for user if not admin
    if (!isAdmin) guildCooldowns.set(message.author.id, now + cooldownMs);

    let converted = convertText(text, FONT_TABLES[font]);
    if (font === "mirror") converted = converted.split("").reverse().join("");

    // Send in 2000-character chunks
    const CHUNK_SIZE = 2000;
    for (let i = 0; i < converted.length; i += CHUNK_SIZE) {
      await message.channel.send(converted.slice(i, i + CHUNK_SIZE));
    }

    // Cleanup old cooldowns
    if (!isAdmin) {
      setTimeout(() => guildCooldowns.delete(message.author.id), cooldownMs);
    }
  },
};
